== Prologue ==

==== Outline ====

\tableofcontents[currentsection]

==== @whoami@ ====

* Val Haenel ("val" like @let val =@)
* \href{https://github.com/esc}{https://github.com/esc}
* Compiler Engineer at \href{https://www.anaconda.com/}{Anaconda}{}
* Working full-time on \href{https://numba.pydata.org/}{Numba}
** (the function compiler for numerical Python)
* Doing this for over 5 years

==== Introduction ====

* Using a Structured Control Flow Graph (SCFG)
* Regularize Python, identify branches and loops
* Branch and loop regions are closed and clearly identified
* Algorithm based on \href{https://dl.acm.org/doi/pdf/10.1145/2693261}{Bahmann2015}
* Implemented in package \href{https://github.com/numba/numba-rvsdg}{numba-rvsdg}
* Two main contributions:
** --> Application of an academic paper to Python source
** --> Solution to de-sugaring Python for-loops

==== Motivation ====

* Make code more amenable for Python compilers
* First step towards an source frontend for Numba
* (Numba currently uses bytecode...)

==  Pipeline ==

==== Outline ====

\tableofcontents[currentsection]

==== Pipeline ====[containsverbatim]

\begin{center}
\begin{tikzpicture}[node distance=0.5cm, every node/.style={draw, rectangle, rounded corners, align=center}]

    \node (ingest) {Python source};
    \node (ast) [below=of ingest] {Abstract Syntax Tree (AST)};
    \node (cfg) [below=of ast] {Control Flow Graph (CFG)};
    \node (scfg) [below=of cfg] {Structured CFG (SCFG)};
    \node (synthesize) [below left=of scfg] {Synthesize Python \\ (implemented)};
    \node (rvsdg) [below right=of scfg] {RVSDG \\ (partially implemented)};

    \foreach \i/\j in {ingest/ast, ast/cfg, cfg/scfg, scfg/synthesize, scfg/rvsdg} {
        \draw[->] (\i.south) -- (\j.north);
    }

\end{tikzpicture}
\end{center}

==== CFG --> SCFG ====

* Identifies loop and branch regions
* Loops become closed and tail controlled (do-while) with a single backedge
* Branch regions are identified as a structure of
** one head region
** two or more branch regions
** one tail region

== Examples ==

==== Outline ====

\tableofcontents[currentsection]

=== Branch ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Branch ====[containsverbatim]

* A simple example

--.5cm--

<[center]
    \pyfile{assets/source/branch.py}
[center]>

==== AST ====[containsverbatim]

\begin{minted}[fontsize=\tiny, xleftmargin=12pt]{python}
        FunctionDef(
            name='branch',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='b',
                        annotation=Name(id='int', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                If(
                    test=Name(id='b', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='r', ctx=Store())],
                            value=Constant(value=1))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='r', ctx=Store())],
                            value=Constant(value=2))]),
                Return(
                    value=Name(id='r', ctx=Load()))],
            decorator_list=[],
            returns=Name(id='int', ctx=Load()),
            type_params=[])],
\end{minted}

==== CFG ====

* CFG is already closed

<[center]
    <<<assets/images/branch-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

* Branch regions are identified, no "restructuring required"

<[center]
    <<<assets/images/branch-scfg.pdf, height=0.85\textheight>>>
[center]>

=== Multi Return ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Multi Return ====[containsverbatim]

* This example has two @return@ statements

--.5cm--

\pyfile{assets/source/multi_return.py}

==== CFG ====

* The CFG is not closed, two exit nodes

<[center]
    <<<assets/images/multi_return-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

* The @CLOSE CFG@ algorithm will restructure to insert an exit node

<[center]
    <<<assets/images/multi_return-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

* Finally, we can synthesize Python
* The transformed function only has a single @return@
* It is now closed

--.5cm--

\pyfile{assets/transformed/multi_return.py}

=== While Loop ===

==== Outline ====

\tableofcontents[currentsubsection]

==== While Loop ====[containsverbatim]

* Next up: a simple loop
* Remember: Loops are closed and tail controlled (do-while) with a single backedge

--.5cm--

\pyfile{assets/source/while_loop.py}

==== CFG ====

<[center]
    <<<assets/images/while_loop-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/while_loop-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

* The transformed variant is as close to a do-while loop as we can get in Python

--.5cm--

\pyfile{assets/transformed/while_loop.py}

=== Early Exit ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Early Exit ====[containsverbatim]

* Let's combine all three stages in this example
* The loop has an "early exit"
* This may be a problem for compilers, e.g, loop-unroll

--.5cm--

\pyfile{assets/source/early_exit.py}

==== CFG ====

<[center]
    <<<assets/images/early_exit-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/early_exit-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

\pythonfile{assets/transformed/early_exit.py}

=== For Loop ===

==== Outline ====

\tableofcontents[currentsubsection]

==== For Loop ====[containsverbatim]

* Python for-loops need to be "de-sugared"
** --> such that they can be represented using the "blocks and edges" semantics of the CFG formalism

--.2cm--

* Setup the induction variable
* Setup the iterator
* Use @next@ to determine when to stop instead of catching the @StopIteration@ exception
* The induction variable must escape the scope

--.2cm--

\pyfile{assets/source/for_loop.py}

==== CFG ====

* De-sugaring happens on-the-fly during conversion to CFG

<[center]
    <<<assets/images/for_loop-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/for_loop-scfg.pdf, height=0.85\textheight >>>
[center]>

==== Transformed ====[containsverbatim]

\pyfile{assets/transformed/for_loop.py}

=== Break and Continue ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Break and Continue ====[containsverbatim]

* Both @break@ and @continue@ will be removed
** (They are just syntactic sugar)

--.2cm--

\pyfile{assets/source/break_and_continue.py}

==== CFG ====

<[center]
    <<<assets/images/break_and_continue-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/break_and_continue-scfg.pdf, height=0.85\textheight >>>
[center]>

==== Transformed ====[containsverbatim]

\inputminted[lastline=21, fontsize=\scriptsize]{python}{assets/transformed/break_and_continue.py}

==== Transformed ====[containsverbatim]

\inputminted[firstline=22, fontsize=\scriptsize]{python}{assets/transformed/break_and_continue.py}

== Epilogue ==

==== Outline ====

\tableofcontents[currentsection]

==== Future Work ====

* Explore full transformation to RVSDG
* Implement Source/AST frontend for Numba
* Find other potential uses...

==== Conclusion ====

* Open source tools used to make this presentation:
** \href{http://wiki2beamer.sourceforge.net/}{Wiki2beamer}
** \href{http://latex-beamer.sourceforge.net/}{\LaTeX beamer}
** \href{http://projects.gnome.org/dia/}{Dia}
** \href{http://pygments.org/}{Pygments}
** \href{http://code.google.com/p/minted/}{Minted}
** \href{https://bitbucket.org/john2x/solarized-pygment}{Solarized theme for pygments}

==== Questions? ====

* Questions?
