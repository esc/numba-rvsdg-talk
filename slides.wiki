== Prolog ==

==== Outline ====

\tableofcontents[currentsection]

==== @whoami@ ====

* Val Haenel ("val" like @let val =@)
* \href{https://github.com/esc}{https://github.com/esc}
* Compiler Engineer at \href{https://www.anaconda.com/}{Anaconda}{}
* Working full-time on \href{https://numba.pydata.org/}{Numba}
** (the function compiler for numerical Python)
* Doing this for over 5 years

==== Introduction ====

* Using a Structured Control Flow Graph (SCFG)
* Regularize Python, identify branches and loops
* Branch and loop regions are closed and clearly identified
* Implemented in package \href{https://github.com/numba/numba-rvsdg}{numba-rvsdg}
* Two main contributions:
** --> Application of an academic paper to Python source
** --> Solution to desugaring Python for-loops

==== Motivation ====

* Make code more ammeanable for Python compilers
* First step towards an source frontend for Numba
* (Numba currently uses bytecode...)

==== Definitions ====

* AST ==>  Abstract Syntax Tree
* IR ==> Intermediary Representation
* CFG ==> Control Flow Graph
* DAG ==> Directed Acyclic Graph
* Closed CFG ==> CFG with eaxctly one entry and one exit node
** Entry node ==> No incoming edges
** Exit node ==> No outgoing edges
* SCFG ==>  Structured Control Flow Graph
* RVSDG ==> Regionalized Value State Dependence Graph

==  Pipeline ==

==== Outline ====

\tableofcontents[currentsection]

==== Pipeline ====

* Ingest Python source
* Convert to AST
* Convert AST to CFG
* Restructure to SCFG
* Synthesize Python source code [implemented]
* Convert to RVSDG [partially implemented]
* Profit! [this is what copilot suggested]

==== SCFG Restructuring ====

* CFG --> SCFG
* Algorithm based on \href{https://dl.acm.org/doi/pdf/10.1145/2693261}{Bahmann2015}
* Pre-processing for conversion to RVSDG
* Useful in it's own right

==== SCFG Restructuring ====

* Three stages:
** @CLOSE CFG@
** @LOOP RESTRUCTURE@
** @BRANCH RESTRUCTURE@

==== SCFG Restructuring ====

* Identifies loop and branch regions
* Loops become closed and tail controlled (do-while) with a single backedge
* Branch regions are identified as a structure of
** one head region
** two or more branch regions
** one tail region

--.5cm--

* Since backedges are contained within loop regions..
* --> we can conceal the loop regions
* --> to obtain a Directed Acyclic Graph (DAG)

==== Plans ====

* Use as source pre-processor for Numba
* Use as IR for a source frontend for Numba
* Other use-cases...?

==== RVSDG? ====

* The RVSDG is a data-flow centric IR
* (CFG and SCFG are control-flow centric)
* Has various nice properties
* Partial implementation in Numba, not ready for presentation yet
* Stay tuned!

==== Example ====[containsverbatim]

* A simple API

\begin{ipythonconsolecode}
In [1]: from numba_rvsdg import AST2SCFG

In [2]: def function():
   ...:     return 1
   ...:

In [3]: scfg = AST2SCFG(function)

In [4]: scfg.view()
\end{ipythonconsolecode}

==== CFG ====

<[center]
    <<<assets/images/function-cfg.pdf, height=0.85\textheight>>>
[center]>

== Examples ==

==== Outline ====

\tableofcontents[currentsection]

=== Branch ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Branch ====[containsverbatim]

* A simple example

--.5cm--

<[center]
    \pyfile{assets/source/branch.py}
[center]>

==== CFG ====

* CFG is already closed

<[center]
    <<<assets/images/branch-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

* Branch regions are identified, no "restructuring required"

<[center]
    <<<assets/images/branch-scfg.pdf, height=0.85\textheight>>>
[center]>

=== Multi Return ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Multi Return ====[containsverbatim]

* This example has two @return@ statements

--.5cm--

\pyfile{assets/source/multi_return.py}

==== CFG ====

* The CFG is not closed, two exit nodes

<[center]
    <<<assets/images/multi_return-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

* The @CLOSE CFG@ algorithm will restructure to insert an exit node

<[center]
    <<<assets/images/multi_return-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

* Finally, we can synthesize Python
* The transformed function only has a single @return@
* It is now closed

--.5cm--

\pyfile{assets/transformed/multi_return.py}

=== While Loop ===

==== Outline ====

\tableofcontents[currentsubsection]

==== While Loop ====[containsverbatim]

* Next up: a simple loop
* Remember: Loops are closed and tail controlled (do-while) with a single backedge

--.5cm--

\pyfile{assets/source/while_loop.py}

==== CFG ====

<[center]
    <<<assets/images/while_loop-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/while_loop-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

* The transformed variant is as close to a do-while loop as we can get in Python

--.5cm--

\pyfile{assets/transformed/while_loop.py}

=== Early Exit ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Early Exit ====[containsverbatim]

* Let's combine all three stages in this example
* The loop has an "early exit"
* This may be a problem for compilers, e.g, loop-unroll

--.5cm--

\pyfile{assets/source/early_exit.py}

==== CFG ====

<[center]
    <<<assets/images/early_exit-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/early_exit-scfg.pdf, height=0.85\textheight>>>
[center]>

==== Transformed ====[containsverbatim]

\pythonfile{assets/transformed/early_exit.py}

=== For Loop ===

==== Outline ====

\tableofcontents[currentsubsection]

==== For Loop ====[containsverbatim]

* Python for-loops need to be "de-sugared"
** --> such that they can be represented using the "blocks and edges" semantics of the CFG formalism

--.2cm--

* Setup the induction variable
* Setup the iterator
* Use @next@ to determine when to stop instead of catching the @StopIteration@ exception
* The induction variable must escape the scope

--.2cm--

\pyfile{assets/source/for_loop.py}

==== CFG ====

* De-sugaring happens on-the-fly during conversion to CFG

<[center]
    <<<assets/images/for_loop-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/for_loop-scfg.pdf, height=0.85\textheight >>>
[center]>

==== Transformed ====[containsverbatim]

\pyfile{assets/transformed/for_loop.py}

=== Break and Continue ===

==== Outline ====

\tableofcontents[currentsubsection]

==== Break and Continue ====[containsverbatim]

* Both @break@ and @continue@ will be removed
* (They are just syntactic sugar)

\pyfile{assets/source/break_and_continue.py}

==== CFG ====

<[center]
    <<<assets/images/break_and_continue-cfg.pdf, height=0.85\textheight>>>
[center]>

==== SCFG ====

<[center]
    <<<assets/images/break_and_continue-scfg.pdf, height=0.85\textheight >>>
[center]>

==== Transformed ====[containsverbatim]

\inputminted[lastline=21, fontsize=\scriptsize]{python}{assets/transformed/break_and_continue.py}

==== Transformed ====[containsverbatim]

\inputminted[firstline=22, fontsize=\scriptsize]{python}{assets/transformed/break_and_continue.py}

== Epilog ==

==== Outline ====

\tableofcontents[currentsection]

==== Future Work ====

* Explore full transformation to RVSDG
* Implement Source/AST frontend for Numba
* Find other potential uses...

==== Conclusion ====

* Open source tools used to make this presentation:
** \href{http://wiki2beamer.sourceforge.net/}{Wiki2beamer}
** \href{http://latex-beamer.sourceforge.net/}{\LaTeX beamer}
** \href{http://projects.gnome.org/dia/}{Dia}
** \href{http://pygments.org/}{Pygments}
** \href{http://code.google.com/p/minted/}{Minted}
** \href{https://bitbucket.org/john2x/solarized-pygment}{Solarized theme for pygments}

==== Questions? ====

* Questions?
