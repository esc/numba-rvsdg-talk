==== Definitions ====

* AST ==>  Abstract Syntax Tree
* IR ==> Intermediary Representation
* CFG ==> Control Flow Graph
* DAG ==> Directed Acyclic Graph
* Closed CFG ==> CFG with eaxctly one entry and one exit node
** Entry node ==> No incoming edges
** Exit node ==> No outgoing edges
* SCFG ==>  Structured Control Flow Graph
* RVSDG ==> Regionalized Value State Dependence Graph

==== Pipeline ====

* Ingest Python source
* Convert to AST
* Convert AST to CFG
* Restructure to SCFG
* Synthesize Python source code (implemented)
* Convert to RVSDG (partially implemented)
* Profit! (this is what copilot suggested)

==== SCFG Restructuring ====

* CFG --> SCFG
* Algorithm based on \href{https://dl.acm.org/doi/pdf/10.1145/2693261}{Bahmann2015}
* Pre-processing for conversion to RVSDG
* Useful in it's own right

==== SCFG Restructuring ====

* Three stages:
** @CLOSE CFG@
** @LOOP RESTRUCTURE@
** @BRANCH RESTRUCTURE@

==== SCFG Restructuring ====

* Identifies loop and branch regions
* Loops become closed and tail controlled (do-while) with a single backedge
* Branch regions are identified as a structure of
** one head region
** two or more branch regions
** one tail region

--.5cm--

* Since backedges are contained within loop regions..
* --> we can conceal the loop regions
* --> to obtain a Directed Acyclic Graph (DAG)

==== Plans ====

* Use as source pre-processor for Numba
* Use as IR for a source frontend for Numba
* Other use-cases...?

==== RVSDG? ====

* The RVSDG is a data-flow centric IR
* (CFG and SCFG are control-flow centric)
* Has various nice properties
* Partial implementation in Numba, not ready for presentation yet
* Stay tuned!

==== Example ====[containsverbatim]

* A simple API

--.2cm--

\begin{ipythonconsolecode}
In [1]: from numba_rvsdg import AST2SCFG

In [2]: def function():
   ...:     return 1
   ...:

In [3]: scfg = AST2SCFG(function)

In [4]: scfg.view()
\end{ipythonconsolecode}

==== CFG ====

<[center]
    <<<assets/images/function-cfg.pdf, height=0.85\textheight>>>
[center]>
